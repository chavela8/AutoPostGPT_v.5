const axios = require('axios');
const { Configuration, OpenAIApi } = require('openai');

const configuration = new Configuration({
  apiKey: process.env.OPENAI_API_KEY,
});
const openai = new OpenAIApi(configuration);

/**
 * –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ—Å—Ç–æ–≤ –∏–∑ –¥–æ–Ω–æ—Ä—Å–∫–æ–≥–æ –∫–∞–Ω–∞–ª–∞.
 * @param {string} donorChannelId - ID –¥–æ–Ω–æ—Ä—Å–∫–æ–≥–æ –∫–∞–Ω–∞–ª–∞.
 * @returns {Promise<Array>} - –ú–∞—Å—Å–∏–≤ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤.
 */
async function copyPostsFromDonor(donorChannelId) {
  // –ü—Ä–∏–º–µ—Ä –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ—Å—Ç–æ–≤ –∏–∑ –¥–æ–Ω–æ—Ä—Å–∫–æ–≥–æ –∫–∞–Ω–∞–ª–∞
  try {
    const response = await axios.get(`https://api.telegram.org/bot${process.env.TELEGRAM_BOT_TOKEN}/getUpdates`, {
      params: {
        offset: -1,
        limit: 100,
        timeout: 0,
      },
    });
    const posts = response.data.result.filter(update => update.message && update.message.chat.id === donorChannelId);
    return posts.map(update => update.message);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø–æ—Å—Ç–æ–≤:', error);
    return [];
  }
}

/**
 * –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –Ω–µ–∂–µ–ª–∞—Ç–µ–ª—å–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º.
 * @param {Array} posts - –ú–∞—Å—Å–∏–≤ –ø–æ—Å—Ç–æ–≤.
 * @param {Array} keywords - –ú–∞—Å—Å–∏–≤ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤.
 * @returns {Array} - –û—á–∏—â–µ–Ω–Ω—ã–π –º–∞—Å—Å–∏–≤ –ø–æ—Å—Ç–æ–≤.
 */
function filterUnwantedContent(posts, keywords) {
  return posts.filter(post => {
    return !keywords.some(keyword => post.text.includes(keyword));
  });
}

/**
 * –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ —á–µ—Ä–µ–∑ GPT –¥–ª—è —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏.
 * @param {string} text - –ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç.
 * @returns {Promise<string>} - –£–Ω–∏–∫–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç.
 */
async function rephraseText(text) {
  try {
    const completion = await openai.createCompletion({
      model: 'text-davinci-003',
      prompt: `–ü–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π —Å–ª–µ–¥—É—é—â–∏–π —Ç–µ–∫—Å—Ç, —á—Ç–æ–±—ã –æ–Ω –±—ã–ª —É–Ω–∏–∫–∞–ª—å–Ω—ã–º:\n\n${text}`,
      max_tokens: 150,
    });
    return completion.data.choices[0].text.trim();
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ç–µ–∫—Å—Ç–∞:', error);
    return text;
  }
}

/**
 * –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö —Ö—ç—à—Ç–µ–≥–æ–≤.
 * @param {string} text - –¢–µ–∫—Å—Ç –ø–æ—Å—Ç–∞.
 * @returns {string} - –¢–µ–∫—Å—Ç —Å –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–º–∏ —Ö—ç—à—Ç–µ–≥–∞–º–∏.
 */
async function generateHashtags(text) {
  try {
    const response = await axios.get(`https://api.example.com/hashtags`, {
      params: {
        apiKey: process.env.HASHTAG_GENERATOR_API_KEY,
        text: text,
      },
    });
    const hashtags = response.data.hashtags.join(' ');
    return `${text}\n\n${hashtags}`;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ö—ç—à—Ç–µ–≥–æ–≤:', error);
    return text;
  }
}

/**
 * –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —ç–º–æ–¥–∑–∏ –≤ —Ç–µ–∫—Å—Ç.
 * @param {string} text - –¢–µ–∫—Å—Ç –ø–æ—Å—Ç–∞.
 * @returns {string} - –¢–µ–∫—Å—Ç —Å –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–º–∏ —ç–º–æ–¥–∑–∏.
 */
function addEmojis(text) {
  // –ü—Ä–∏–º–µ—Ä –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —ç–º–æ–¥–∑–∏ –≤ —Ç–µ–∫—Å—Ç
  const emojis = ['üòä', 'üöÄ', '‚ú®', 'üî•', 'üí°', 'üìö'];
  return `${text} ${emojis[Math.floor(Math.random() * emojis.length)]}`;
}

module.exports = {
  copyPostsFromDonor,
  filterUnwantedContent,
  rephraseText,
  generateHashtags,
  addEmojis,
};